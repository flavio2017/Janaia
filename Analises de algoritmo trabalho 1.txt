#include <stdio.h>

int main(){
    int i, j, c, bigger, smaller;
    char vertices[12] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'};
    char biggerC[2], smallerC[2];
    int matrix[12][12] = {
       //A B C D E F G H I J K L
        {0,16,10,0,0,0,0,0,0,12,0,0},//A
        {16,0,7,13,2,0,0,0,0,0,0,0},//B
        {10,7,0,0,1,0,21,0,0,0,0,0},//C
        {0,13,0,0,0,0,15,0,0,0,0,0},//D
        {0,2,1,0,0,9,0,0,0,0,4,0},//E
        {0,0,0,0,9,0,3,20,0,0,8,0},//F
        {0,0,21,15,0,3,0,18,17,0,0,0},//G
        {0,0,0,0,0,20,18,0,0,19,0,0},//H
        {0,0,0,0,0,0,17,0,0,5,6,14},//I
        {12,0,0,0,0,0,0,19,5,0,0,0},//J
        {0,0,0,0,4,8,0,0,6,0,0,11},//K
        {0,0,0,0,0,0,0,0,14,0,11,0} //L
    };

    for(i=0;i<12;i++){
        c = 0;

        printf("Vizinhos do %c:", vertices[i]);
        for(j=0;j<12;j++){
            if(matrix[i][j] != 0){

                if(c==0 && i==0){
                    bigger = matrix[i][j];
                    smaller = matrix[i][j];
                    biggerC[0] = vertices[j];
                    biggerC[1] = vertices[i];
                    smallerC[0]= vertices[j];
                    smallerC[1] = vertices[i];
                }

                if(matrix[i][j] > bigger){
                    bigger = matrix[i][j];
                    biggerC[0] = vertices[j];
                    biggerC[1] = vertices[i];
                }

                if(matrix[i][j] < smaller){
                    smaller = matrix[i][j];
                    smallerC[0] = vertices[j];
                    smallerC[1] = vertices[i];
                }

                printf(" %c ", vertices[j]);
                c++;
            };
        }
        printf("\nGRAU DO %c = %d\n", vertices[i], c);
    }
    printf("\nMaior ligacao: %c <-> %c = %d\n", biggerC[0], biggerC[1], bigger);
    printf("Menor ligacao: %c <-> %c = %d\n", smallerC[0], smallerC[1], smaller);

    return 0;
}


#include <stdio.h>

int main(){
    int i,j;
    int inDegree, outDegree; //auxiliar de entradas e saidas
    int matrix[5][5] = {
       //1 2 3 4 5
        {0,1,1,1,1},   //1
        {-1,0,-1,-1,0},//2
        {-1,1,0,1,0},  //3
        {-1,1,-1,0,-1},//4
        {-1,0,0,1,0}   //5
    };

    for(i=0;i<5;i++){
        inDegree = 0;
        outDegree = 0;
        printf("ENTRADAS E SAIDAS:\n");
        for(j=0;j<5;j++){
            if(matrix[i][j] ==  -1){
                inDegree++;
                printf("%d <- %d\n", i+1, j+1);
            }
            if(matrix[i][j] == 1){
                outDegree++;
                printf("%d -> %d\n", i+1, j+1);
            }
        }
        printf("Grau de entrada no vertice %d: %d\n", i+1, inDegree);
        printf("Grau de saida no vertice %d: %d\n\n", i+1, outDegree);
    }

    return 0;
}


#include <stdio.h>
#include <stdlib.h>

// CUSTO DO ALGORITMO (RESULTADO FINAL)
// MELHOR CASO = 3n³+7n²+13n+11
// PIOR CASO = 3n³+24n²+13n+11

int verify(int **matrix, int i, int j){

    if(matrix[0][0] == 1 || matrix[4][4] == 1) // PIOR CASO 2 COMPARAÇÕES = 2 MELHOR CASO = 1
        return 1; // RETORNO = 1
        // PIOR CASO 2+1 = 3
        // MELHOR CASO 1+1 = 2

    if(i == 0 && j == 0) // 2 COMPARAÇÕES 2
        return matrix[i][j]; // RETORNO = 1
        //CUSTO = 2+1 = 3

    if(i > 0 && matrix[i-1][j] == 0) // 2 COMPARAÇÕES = 2
        return verify(matrix, i-1, j);// RETORNO = 1
        //CUSTO = 2+1 = 3

    if(j > 0 && matrix[i][j-1] == 0) // 2 COMPARAÇÕES = 2
        return verify(matrix, i, j-1); // RETORNO = 1
        //CUSTO = 2+1 = 3

    if ((matrix[i][j-1] == 1 && i < 4) || (matrix[i-1][j] == 1 && i < 4)){// PIOR CASO 4 COMPARAÇÕES = 4 MELHOR CASO = 2
        matrix[i][j] = 1; // ATRIBUIÇÃO = 1
        matrix[i+1][j] == 0 ? verify(matrix, i+1, j) : verify(matrix, i, j+1); // COMPARACAO E ATRIBUIÇÃO = 2
        //PIOR CASO = 4+1+2 = 7
        //MELHOR CASO = 2+1+2 = 5

    }else{
        return 1; // RETORNO = 1
    }
    //MELHOR CASO 4+1 = 5
    //PIOR CASO = 7
}

// FUNCAO VERIFY
// MELHOR CASO = 2
// PIOR CASO (3*4)+7 = 19

int **allocateMatrix(int **matrix){
    int i;

    matrix = (int **)malloc(5 * sizeof(int*)); // RETORNO DA FUNCAO MALLOC E ATRIBUIÇÃO = 2
    for(i=0;i<5;i++){ // LOOP COM INCREMENTOS, ATRIBUIÇÕES E COMPARAÇÕES 2(n+1);
        matrix[i] = (int*)malloc(5 * sizeof(int));// RETORNO DA FUNCAO MALLOC E ATRIBUICÃO DENTRO DE LOOP  = 2*n
    }

    return matrix;;// RETORNO 1
}
// FUNCAO ALLOCATE MATRIX
// CUSTO = 2+2n+2+2n = 4n+4

void **deallocateMatrix(int **matrix){
    int i;

    for(i=0;i<5;i++){// LOOP COM INCREMENTOS, ATRIBUIÇÕES E COMPARAÇÕES 2(n+1)
        free(matrix[i]);// FUNÇÃO FREE NÃO POSSUI RETORNO = 0
    }
    free(matrix); // FUNÇÃO FREE NÃO POSSUI RETORNO = 0
}
// FUNCAO DEALLOCATE MATRIX
// CUSTO = 2n+2

void readMatrix(int **matrix){
    int i, j;

    for(i=0;i<5;i++){// LOOP COM INCREMENTOS, ATRIBUIÇÕES E COMPARAÇÕES 2(n+1)
        printf("Insira a linha %d da matriz: ", i+1);// RETORNO DA FUNÇÃO DENTRO DE LOOP = n
        for(j=0;j<5;j++){// LOOP COM INCREMENTOS, ATRIBUIÇÕES E COMPARAÇÕES DENTRO DE OUTRO n*2(n+1)
            scanf("%d", &matrix[i][j]);// RETORNO DA FUNÇÃO SCANF DENTRO DE 2 LOOPS = n²
        }
    }
}

//FUNCAO READ MATRIX
// CUSTO = 2n+2+n+2n²+2n+n² = 3n²+5n+2

int main(){

    int **matrix, numMatrix;

    matrix = allocateMatrix(matrix); // ATRIBUICAO + ALLOCATE MATRIX = 1+4n+4 = 4n+5

    printf("Digite a quantidade de matrizes: ");// RETORNO DA FUNCAO PRINTF = 1
    scanf("%d", &numMatrix);// RETORNO DA FUNCAO SCANF = 1

    while(numMatrix > 0){// LOOP ATRIBUIÇÕES SÃO FEITAS DENTRO DELE E INICIALIZACAO DE numMatrix JA FOI FEITA = n+1

        printf("\nDigite a linha da matriz separada por espacos ex: 0 0 1 0 1\n");// RETORNO DA FUNCAO PRINTF DENTRO DE LOOP = n
        readMatrix(matrix);// READ MATRIX DENTRO DE LOOP = n(3n²+5n+2) = 3n³+5n²+2n

        verify(matrix, 4, 4) == 1 ? printf("ROBBERS\n") : printf("COPS\n");// COMPARACAO + VERIFY(RECURSIVA DENTRO DE LOOP = n²) + PRINTF DENTRO DE LOOP:
                                                                           // PIOR CASO = n²(19)+2n = 19n²+2n
                                                                           // MELHOR CASO = n²(2)+2n = 2n²+2n

        numMatrix--;// ATRIBUIÇÃO = n

    }
    //CUSTO DO LOOP WHILE:
    // PIOR CASO = n+1+n+3n³+5n²+2n+19n²+2n+n = 3n³+24n²+7n+1
    // MELHOR CASO = n+1+n+3n³+5n²+2n+2n²+2n+n = 3n³+7n²+7n+1

    deallocateMatrix(matrix);// DEALLOCATE MATRIX = 2n+2

    return 0; //RETORNO = 1
}

// FUNCAO MAIN
// MELHOR CASO = 4n+5+1+1+3n³+7n²+7n+1+2n+2+1 = 3n³+7n²+13n+11
// PIOR CASO = 4n+5+1+1+3n³+24n²+7n+1+2n+2+1 = 3n³+24n²+13n+11



#include <stdio.h>
#include <stdlib.h>

int verify(int **matrix, int i, int j){

    if(matrix[0][0] == 1 || matrix[4][4] == 1)
        return 1;

    if(i == 0 && j == 0)
        return matrix[i][j];

    if(i > 0 && matrix[i-1][j] == 0)
        return verify(matrix, i-1, j);

    if(j > 0 && matrix[i][j-1] == 0)
        return verify(matrix, i, j-1);

    if ((matrix[i][j-1] == 1 && i < 4) || (matrix[i-1][j] == 1 && i < 4)){
        matrix[i][j] = 1;
        matrix[i+1][j] == 0 ? verify(matrix, i+1, j) : verify(matrix, i, j+1);
    }else{
        return 1;
    }

}

int **allocateMatrix(int **matrix){
    int i;

    matrix = (int **)malloc(5 * sizeof(int*));
    for(i=0;i<5;i++){
        matrix[i] = (int*)malloc(5 * sizeof(int));
    }

    return matrix;
}

void **deallocateMatrix(int **matrix){
    int i;

    for(i=0;i<5;i++){
        free(matrix[i]);
    }
    free(matrix);
}

void readMatrix(int **matrix){
    int i, j;

    for(i=0;i<5;i++){
        printf("Insira a linha %d da matriz: ", i+1);
        for(j=0;j<5;j++){
            scanf("%d", &matrix[i][j]);
        }
    }
}

int main(){

    int **matrix, numMatrix;

    matrix = allocateMatrix(matrix);

    printf("Digite a quantidade de matrizes: ");
    scanf("%d", &numMatrix);

    while(numMatrix > 0){

        printf("\nDigite a linha da matriz separada por espacos ex: 0 0 1 0 1\n");
        readMatrix(matrix);
        verify(matrix, 4, 4) == 1 ? printf("ROBBERS\n") : printf("COPS\n");
        numMatrix--;

    }

    deallocateMatrix(matrix);

    return 0;
}



   
